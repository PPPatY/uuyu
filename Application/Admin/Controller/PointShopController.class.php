<?php
/**
 * Created by PhpStorm.
 * User: xmy 280564871@qq.com
 * Date: 2017/4/5
 * Time: 19:47
 */

namespace Admin\Controller;

use Admin\Model\PointShopModel;

class PointShopController extends ThinkController
{


	public function _initialize()
	{
		$this->meta_title = "积分商品";
		return parent::_initialize(); // TODO: Change the autogenerated stub
	}

	public function lists($p=1)
	{
		$model = new PointShopModel();
        $row = intval(C('LIST_ROWS')) ? :10;
		$data = $model->getLists("","create_time desc",$p,$row);
		$this->assign("data",$data['data']);

		//分页
		$count = $data['count'];

		if($count > $row){
			$page = new \Think\Page($count, $row);
			$page->setConfig('theme','%UP_PAGE% %FIRST% %LINK_PAGE% %END% %DOWN_PAGE% %HEADER%');
			$this->assign('_page', $page->show());
		}

		$this->display();
	}

	public function add()
	{
		if (IS_POST) {
			$pinyin = new \Think\Pinyin();
            $num=mb_strlen($_POST['good_name'],'UTF8');
            $short = '';
            for ($i=0; $i <$num ; $i++) { 
                $str=mb_substr( $_POST['good_name'], $i, 1, 'UTF8');
            	if(is_numeric($str)){
            		$short.= $str;
            	}else{
                	$short.=$pinyin->getFirstChar($str);
            	}
            }
            $_POST['short_name'] = $short;
			$model = new PointShopModel();
			$result = $model->saveData();
			if ($result !== false) {
				$this->success("添加成功!", U('lists'));
			} else {
				$this->error("添加失败：" . $model->getError());
			}
		} else {
			$this->display();
		}
	}


	public function edit($id)
	{
		$model = new PointShopModel();
		if (IS_POST) {
			$pinyin = new \Think\Pinyin();
            $num=mb_strlen($_POST['good_name'],'UTF8');
            $short = '';
            for ($i=0; $i <$num ; $i++) { 
                $str=mb_substr( $_POST['good_name'], $i, 1, 'UTF8');
            	if(is_numeric($str)){
            		$short.= $str;
            	}else{
                	$short.=$pinyin->getFirstChar($str);
            	}
            }
            $_POST['short_name'] = $short;
			$result = $model->saveData($id);
			if ($result !== false) {
				$this->success("编辑成功!", U('lists'));
			} else {
				$this->error("编辑失败：" . $model->getError());
			}
		} else {
			$data = $model->getData($id);
			$this->assign("data",$data);
			$this->display();
		}
	}

	public function delete($ids){
		$model = new PointShopModel();
		$map['id'] = ['in',$ids];
		$result = $model->where($map)->delete();
		if ($result !== false){
			$this->success("删除成功!", U('lists'));
		}else{
			$this->error("删除失败");
		}
	}
	public function mall_rule(){
		$this->meta_title = "积分规则";
		$page = intval($p);
        $page = $page ? $page : 1; //默认显示第一页数据
        $arraypage=$page;
        $row = 10;
		$map['status'] = 1;
		if(I('get.title')!=''){
			$map['title'] = array('like','%'.trim(I('get.title')).'%');
		}
		$data = M('PointRule','tab_')->where($map)->order('sort desc')->select();
		$count=count($data);
		if($_REQUEST['data_order']!=''){
            $data_order=reset(explode(',',$_REQUEST['data_order']));
            $data_order_type=end(explode(',',$_REQUEST['data_order']));
            $this->assign('userarpu_order',$data_order);
            $this->assign('userarpu_order_type',$data_order_type);
        }
        if($count > $row){
            $page = new \Think\Page($count, $row);
            $page->setConfig('theme','%UP_PAGE% %FIRST% %LINK_PAGE% %END% %DOWN_PAGE% %HEADER%');
            $this->assign('_page', $page->show());
        }
        $data=my_sort($data,$data_order_type,(int)$data_order);
		$size=$row;//每页显示的记录数
        $pnum = ceil(count($data) / $size); //总页数，ceil()函数用于求大于数字的最小整数
        //用array_slice(array,offset,length) 函数在数组中根据条件取出一段值;array(数组),offset(元素的开始位置),length(组的长度)
        $data = array_slice($data, ($arraypage-1)*$size, $size);
		$this->assign('data',$data);
		$this->display();
	}
	public function rule_add(){
		$this->meta_title = "积分规则";
		if(IS_POST){
			if($_POST['title']==''){
				$this->error('标题不能为空');
			}
			if($_POST['content']==''){
				$this->error('规则不能为空');
			}
			if(!preg_match("/^[1-9]\d*$/", $_POST['sort'])&&$_POST['sort']!=0){
				$this->error('排序格式不正确');
			}
			$data['title'] 			= $_POST['title'];
			$data['content'] 		= $_POST['content'];
			$data['sort'] 			= $_POST['sort'];
			$data['status'] 		= 1;
			$data['create_time'] 	= time();
			$res = M('PointRule','tab_')->add($data);
			if($res){
				$this->success('新增成功',U('mall_rule'));
			}else{
				$this->success('新增失败');
			}
		}else{
			$this->display();
		}
	}
	public function rule_edit(){
		$this->meta_title = "积分规则";
		if(IS_POST){
			if($_POST['title']==''){
				$this->error('标题不能为空');
			}
			if($_POST['content']==''){
				$this->error('规则不能为空');
			}
			if(!preg_match("/^[1-9]\d*$/", $_POST['sort'])&&$_POST['sort']!=0){
				$this->error('排序格式不正确');
			}
			$data['title'] 			= $_POST['title'];
			$data['content'] 		= $_POST['content'];
			$data['sort'] 			= $_POST['sort'];
			$data['id'] 			= $_POST['id'];
			$res = M('PointRule','tab_')->save($data);
			if($res!==false){
				$this->success('编辑成功',U('mall_rule'));
			}else{
				$this->success('编辑失败');
			}
		}else{
			$map['id'] = I('get.id');
			$data = M('PointRule','tab_')->where($map)->find();
			$this->assign('data',$data);
			$this->display();
		}
	}
	public function rule_delete($ids){
		$map['id'] = ['in',$ids];
		$result =M('PointRule','tab_')->where($map)->delete();
		if ($result !== false){
			$this->success("删除成功!", U('mall_rule'));
		}else{
			$this->error("删除失败");
		}
	}

	/*ueditor*/
    public function save_info(){
        $ueditor_config = json_decode(preg_replace("/\/\*[\s\S]+?\*\//", "", file_get_contents("./Public/Ueditor/php/config.json")), true);
        $action = $_GET['action'];
        switch ($action) {
            case 'config':
                $result = json_encode($ueditor_config);
                break;
            /* 上传图片 */
            case 'uploadimage':
                /* 上传涂鸦 */
            case 'uploadscrawl':
                /* 上传视频 */
            case 'uploadvideo':
                /* 上传文件 */
            case 'uploadfile':
                $upload = new \Think\Upload();
                $upload->maxSize = 3145728;
                $upload->rootPath = './Uploads/Ueditor/';
                $upload->exts = array('jpg', 'gif', 'png', 'jpeg');
                $info = $upload->upload();
                if (!$info) {
                    $result = json_encode(array(
                        'state' => $upload->getError(),
                    ));
                } else {
                    $url = __ROOT__ . "/Uploads/Ueditor/" . $info["upfile"]["savepath"] . $info["upfile"]['savename'];
                    $result = json_encode(array(
                        'url' => $url,
                        'title' => htmlspecialchars($_POST['pictitle'], ENT_QUOTES),
                        'original' => $info["upfile"]['name'],
                        'state' => 'SUCCESS'
                    ));
                }
                break;
            default:
                $result = json_encode(array(
                    'state' => '请求地址出错'
                ));
                break;
        }
        /* 输出结果 */
        if (isset($_GET["callback"])) {
            if (preg_match("/^[\w_]+$/", $_GET["callback"])) {
                echo htmlspecialchars($_GET["callback"]) . '(' . $result . ')';
            } else {
                echo json_encode(array(
                    'state' => 'callback参数不合法'
                ));
            }
        } else {
            echo $result;
        }
    }

}